openapi: 3.0.2
servers:
  - description: Local Dev
    url: http://localhost:5000
  - description: Mock Service
    url: https://mocker.test.opiscloud.com/OpisMobileB2CClient
info:
  title: Opis Mobile Customer Api
  description: Opis Mobile Customer Services Documentation
  contact:
    email: admin@albatr.com
  version: v1
tags:
  - name: Tenants
    description: Mobile tenants operations
  - name: Campaigns
    description: Mobile campaigns operations
  - name: Tariffs
    description: Mobile tariffs operations
  - name: Cards
    description: Mobile cards operations
  - name: Modules
    description: Mobile module operations
  - name: Notifications
    description: Mobile notifications operations
paths:
  /tenants:
    get:
      tags:
        - Tenants
      summary: Get all Tenants
      description: List of all Tenants
      operationId: getTenants
      parameters:
        - $ref: '#/components/parameters/AcceptLanguageParameter'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Term'
        - $ref: '#/components/parameters/Sort'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantListModel'
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
  /tenants/{tenantIdentifier}:
    get:
      tags:
        - Tenants
      summary: Get Tenant by Id
      description: Get Tenants by Id
      operationId: getTenant
      parameters:
        - $ref: '#/components/parameters/AcceptLanguageParameter'
        - $ref: '#/components/parameters/TenantIdentifierParameter'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantModel'
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /tenants/{tenantIdentifier}/campaigns:
    get:
      tags:
        - Campaigns
      summary: Get Mobile Campaign
      description: Get Mobile Campaign
      operationId: getCampaign
      parameters:
        - $ref: '#/components/parameters/AcceptLanguageParameter'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Term'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/TenantIdentifierParameter'

      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignListModel'
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
        '400':
          $ref: '#/components/responses/BadRequest'
  /tenants/{tenantIdentifier}/campaigns/{campaignId}:
    get:
      tags:
        - Campaigns
      summary: Get Mobile Campaign
      description: Get Mobile Campaign
      operationId: getCampaigns
      parameters:
        - $ref: '#/components/parameters/AcceptLanguageParameter'
        - $ref: '#/components/parameters/TenantIdentifierParameter'
        - $ref: '#/components/parameters/CampaignIdParameter'

      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignModel'
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
        '400':
          $ref: '#/components/responses/BadRequest'
  /tenants/{tenantIdentifier}/campaigns/{campaignId}/tariffs:
    get:
      tags:
        - Tariffs
      summary: Get all Mobile Tariffs by tenant identifier
      description: Get all mobile platform tariffs by tenant identifier
      operationId: getTariffs
      parameters:
        - $ref: '#/components/parameters/AcceptLanguageParameter'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Term'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/TenantIdentifierParameter'
        - $ref: '#/components/parameters/CampaignIdParameter'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TariffListModel'
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
        '400':
          $ref: '#/components/responses/BadRequest'
  /tenants/{tenantIdentifier}/campaigns/{campaignId}/tariffs/{tariffId}:
    get:
      tags:
        - Tariffs
      summary: Get Tariff
      description: Get tariff by Id
      operationId: getTariff
      parameters:
        - $ref: '#/components/parameters/AcceptLanguageParameter'
        - $ref: '#/components/parameters/TenantIdentifierParameter'
        - $ref: '#/components/parameters/CampaignIdParameter'
        - $ref: '#/components/parameters/TariffIdParameter'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TariffModel'
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /tenants/{tenantIdentifier}/cards/{cardNo}/transactions:
    get:
      tags:
        - Cards
      summary: Get Card Transactions
      description: Get card transactions by cardNo
      operationId: getCardTransactions
      parameters:
        - $ref: '#/components/parameters/AcceptLanguageParameter'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Term'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/TenantIdentifierParameter'
        - $ref: '#/components/parameters/CardNoParameter'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardTransactionListModel'
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
        '400':
          $ref: '#/components/responses/BadRequest'
  /tenants/{tenantIdentifier}/modules/{moduleId}/lock:
    post:
      tags:
        - Modules
      summary: Lock Module
      description: Lock module
      operationId: lockModule
      parameters:
        - $ref: '#/components/parameters/AcceptLanguageParameter'
        - $ref: '#/components/parameters/ModuleIdParameter'
        - $ref: '#/components/parameters/TenantIdentifierParameter'
      requestBody:
        description: lock Module
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModuleLockRequestModel'
      responses:
        '201':
          description: locked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModuleLockModel'
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
        '400':
          $ref: '#/components/responses/BadRequest'
    delete:
      tags:
        - Modules
      summary: delete lock Module
      description: cancel locked module
      operationId: deleteLockModule
      parameters:
        - $ref: '#/components/parameters/AcceptLanguageParameter'
        - $ref: '#/components/parameters/ModuleIdParameter'
        - $ref: '#/components/parameters/TenantIdentifierParameter'
      responses:
        '204':
          description: lock released
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /tenants/{tenantIdentifier}/modules/{moduleId}/play:
    post:
      tags:
        - Modules
      summary: Play Module
      description: Play Module
      operationId: playModule
      parameters:
        - $ref: '#/components/parameters/AcceptLanguageParameter'
        - $ref: '#/components/parameters/ModuleIdParameter'
        - $ref: '#/components/parameters/TenantIdentifierParameter'
      requestBody:
        description: play Module
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModulePlayRequestModel'
      responses:
        '204':
          description: Module started
        '400':
          $ref: '#/components/responses/BadRequest'
  /cards:
    post:
      tags:
        - Cards
      summary: Create User Card
      description: Create user card by userId
      operationId: createUserCard
      parameters:
        - $ref: '#/components/parameters/AcceptLanguageParameter'
      requestBody:
        description: Create user card
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardRequestModel'
      responses:
        '201':
          description: Card created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardModel'
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
        '400':
          $ref: '#/components/responses/BadRequest'
    get:
      tags:
        - Cards
      summary: Get User Cards
      description: Get user cards by userId
      operationId: getUserCards
      parameters:
        - $ref: '#/components/parameters/AcceptLanguageParameter'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Term'
        - $ref: '#/components/parameters/Sort'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardListModel'
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /cards/{cardNo}:
    get:
      tags:
        - Cards
      summary: Get User Card
      description: Get user card by userId
      operationId: getUserCard
      parameters:
        - $ref: '#/components/parameters/AcceptLanguageParameter'
        - $ref: '#/components/parameters/CardNoParameter'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardModel'
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /notifications:
    get:
      tags:
        - Notifications
      summary: Get User Notifications
      description: Get user notifications by userId
      operationId: getUserNotifications
      parameters:
        - $ref: '#/components/parameters/AcceptLanguageParameter'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Term'
        - $ref: '#/components/parameters/Sort'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationListModel'
          headers:
            Content-Language:
              $ref: '#/components/headers/Content-Language'
        '400':
          $ref: '#/components/responses/BadRequest'
components:
  headers:
    Location:
      schema:
        type: string
        format: url
      description: A link to created resource
      example: https://www.istanbul.com
    Content-Language:
      schema:
        type: string
        enum:
          - tr-TR
          - en-US
      description: the language(s) intended for the audience
      example: tr-TR
    X-RateLimit-Limit:
      schema:
        type: integer
      description: Request limit per hour.
    X-RateLimit-Remaining:
      schema:
        type: integer
      description: The number of requests left for the time window.
    X-RateLimit-Reset:
      schema:
        type: string
      description: The UTC date/time at which the current rate limit window resets.
  parameters:
    AcceptLanguageParameter:
      name: Accept-Language
      in: header
      required: true
      schema:
        type: string
        enum:
          - tr
          - en
          - tr-TR
          - en-US
      description: language(s) client is able to understand, and which locale variant is preferred
      example: tr
    Offset:
      name: offset
      in: query
      description: The number of items to skip before starting to collect the result set.
      schema:
        type: integer
        minimum: 0
        default: 0
    Limit:
      name: limit
      in: query
      description: The numbers of items to return.
      schema:
        type: integer
        minimum: 1
        maximum: 50
        default: 20
    Term:
      name: term
      in: query
      description: Filter argument in which to retrieve the results. Basic text search on relevant fields
      schema:
        type: string
        default: isim
    Sort:
      name: sort
      in: query
      description: Order in which to retrieve the results. Multiple sort criteria can not be passed
      schema:
        type: string
        default: name
    TenantIdentifierParameter:
      name: tenantIdentifier
      in: path
      required: true
      schema:
        type: string
        example: funnycenter1
      description: Tenant Identifier
    CampaignIdParameter:
      name: campaignId
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Campaign Id
    TariffIdParameter:
      name: tariffId
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Tariff Id
    CardNoParameter:
      name: cardNo
      in: path
      required: true
      schema:
        type: string
      description: Card No
    ModuleIdParameter:
      name: moduleId
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Module Id
  responses:
    BadRequest:
      description: The specified resource was not valid
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                example: fC9LZX
              title:
                type: string
                example: Invalid request parameters
              detail:
                type: string
                example: The provided resource parameters are not valid.
              errors:
                type: array
                items:
                  type: string
                  example: validation error message
            required:
              - code
              - title
              - detail
      headers:
        Content-Language:
          schema:
            type: string
            enum:
              - tr-TR
              - en-US
          description: the language(s) intended for the audience
          example: tr-TR
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                example: fC9LZX
              title:
                type: string
                example: Invalid request parameters
              detail:
                type: string
                example: The provided resource parameters are not valid.
              errors:
                type: array
                items:
                  type: string
                  example: validation error message
            required:
              - code
              - title
              - detail
      headers:
        Content-Language:
          schema:
            type: string
            enum:
              - tr-TR
              - en-US
          description: the language(s) intended for the audience
          example: tr-TR
  securitySchemes:
    bearer:
      type: apiKey
      name: Authorization
      in: header
      description: 'Authorization header using the Bearer scheme. Ex: "Authorization: Bearer {token}"'
  schemas:
    TenantListModel:
      type: object
      properties:
        totalCount:
          type: integer
          description: Total items count
          x-yaver-mock:
            type: integer
            options:
              min: 0
              max: 30
        items:
          type: array
          items:
            $ref: '#/components/schemas/TenantListItemModel'
    TenantListItemModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
          x-yaver-mock:
            type: guid
        identifier:
          type: string
          example: funnycenter1
          x-yaver-mock:
            type: word
            options:
              length: 8
        name:
          type: string
          example: Mert Park
          x-yaver-mock:
            type: company
        logoUrl:
          type: string
          example: shorturl.at/EJZ04
          x-yaver-mock:
            type: fixed
            options:
              value: https://picsum.photos/536/354
    TenantModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
          x-yaver-mock:
            type: guid
        identifier:
          type: string
          example: funnycenter1
          x-yaver-mock:
            type: word
            options:
              length: 8
        name:
          type: string
          example: Mert Park
          x-yaver-mock:
            type: company
        logoUrl:
          type: string
          example: shorturl.at/EJZ04
          x-yaver-mock:
            type: fixed
            options:
              value: https://picsum.photos/536/354
    CampaignListModel:
      type: object
      properties:
        totalCount:
          type: integer
          description: Total items count
          x-yaver-mock:
            type: integer
            options:
              min: 0
              max: 30
        items:
          type: array
          items:
            $ref: '#/components/schemas/CampaignListItemModel'
    CampaignListItemModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
          x-yaver-mock:
            type: guid
        name:
          type: string
          example: Mobile Campaigns
          x-yaver-mock:
            type: sentence
            options:
              words: 2
        tenantIdentifier:
          type: string
          example: funnycenter1
          x-yaver-mock:
            type: word
            options:
              length: 8
        isActive:
          type: boolean
          example: false
          x-yaver-mock:
            type: bool
    CampaignModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
          x-yaver-mock:
            type: guid
        name:
          type: string
          example: Mobile Campaigns
          x-yaver-mock:
            type: sentence
            options:
              words: 2
        tenantIdentifier:
          type: string
          example: funnycenter1
          x-yaver-mock:
            type: word
            options:
              length: 8
        description:
          type: string
          example: 23 Nisan Çocuk bayramı kampanyası
          x-yaver-mock:
            type: sentence
            options:
              words: 5
        isActive:
          type: boolean
          example: false
          x-yaver-mock:
            type: bool
        startDate:
          type: string
          example: '2020-01-01T00:00:00.000Z'
          x-yaver-mock:
            type: isodate
        endDate:
          type: string
          example: '2020-01-01T00:00:00.000Z'
          x-yaver-mock:
            type: isodate
    TariffListModel:
      type: object
      properties:
        totalCount:
          type: integer
          description: Total items count
          x-yaver-mock:
            type: integer
            options:
              min: 0
              max: 30
        items:
          type: array
          items:
            $ref: '#/components/schemas/TariffListItemModel'
    TariffListItemModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
          x-yaver-mock:
            type: guid
        campaignId:
          type: string
          format: uuid
          x-yaver-mock:
            type: guid
        price:
          type: number
          example: 100
          x-yaver-mock:
            type: integer
            options:
              min: 100
              max: 300
        bonus:
          type: number
          example: 50
          x-yaver-mock:
            type: integer
            options:
              min: 10
              max: 60
        credit:
          type: number
          example: 50
          x-yaver-mock:
            type: integer
            options:
              min: 10
              max: 60
    TariffModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
          x-yaver-mock:
            type: guid
        campaignId:
          type: string
          format: uuid
          x-yaver-mock:
            type: guid
        price:
          type: number
          example: 100
          x-yaver-mock:
            type: integer
            options:
              min: 100
              max: 300
        bonus:
          type: number
          example: 50
          x-yaver-mock:
            type: integer
            options:
              min: 10
              max: 60
        credit:
          type: number
          example: 50
          x-yaver-mock:
            type: integer
            options:
              min: 10
              max: 60
    CardTransactionListModel:
      type: object
      properties:
        totalCount:
          type: integer
          description: Total items count
          x-yaver-mock:
            type: integer
            options:
              min: 0
              max: 30
        items:
          $ref: '#/components/schemas/CardTransactionTypes'
    CardTransactionListItemModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
          x-yaver-mock:
            type: guid
        cardNo:
          type: string
          example: '1234567890123456'
          x-yaver-mock:
            type: cc
        description:
          type: string
          example: Mizbo Oyun
          x-yaver-mock:
            type: sentence
            options:
              words: 3
        createdAt:
          type: string
          description: transaction created date
          example: '2020-01-01T00:00:00.000Z'
          x-yaver-mock:
            type: isodate
        startDate:
          type: string
          description: transaction start date
          example: '2020-01-01T00:00:00.000Z'
          x-yaver-mock:
            type: isodate
        endDate:
          type: string
          description: transaction end date
          example: '2020-01-01T00:00:00.000Z'
          x-yaver-mock:
            type: isodate
        types:
          $ref: '#/components/schemas/CardTypeModel'
        amount:
          type: number
          format: float
          example: 100
          x-yaver-mock:
            type: floating
            options:
              min: 100
              max: 300
    ModuleLockRequestModel:
      type: object
      properties:
        tenantIdentifier:
          type: string
          example: funnycenter1
          x-yaver-mock:
            type: word
            options:
              length: 8
        moduleId:
          type: string
          format: uuid
          x-yaver-mock:
            type: guid
    ModuleLockModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
          x-yaver-mock:
            type: guid
        module:
          $ref: '#/components/schemas/ModuleModel'
    ModuleModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
          x-yaver-mock:
            type: guid
        price:
          type: number
          example: 100
          x-yaver-mock:
            type: integer
            options:
              min: 50
              max: 200
        machine:
          $ref: '#/components/schemas/MachineModel'
    MachineModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
          x-yaver-mock:
            type: guid
        name:
          type: string
          example: mizbo
          x-yaver-mock:
            type: word
            options:
              length: 5
        imageUrl:
          type: string
          example: shorturl.at/EJZ04
          x-yaver-mock:
            type: fixed
            options:
              value: https://picsum.photos/536/354
    ModulePlayRequestModel:
      type: object
      properties:
        tenantIdentifier:
          type: string
          example: funnycenter1
          x-yaver-mock:
            type: word
            options:
              length: 8
        moduleId:
          type: string
          format: uuid
          x-yaver-mock:
            type: guid
    CardRequestModel:
      type: object
      properties:
        tenantIdentifier:
          type: string
          example: funnycenter1
          x-yaver-mock:
            type: word
            options:
              length: 8
        type:
          type: string
          enum:
            - Cash
            - Bonus
            - Ticket
            - Credit
            - Guest
            - TimeCredit
            - TimeCash
            - TimeUnlimited
          example: Cash
          x-yaver-mock:
            type: pickone
            options:
              - Cash
              - Bonus
              - Ticket
              - Credit
              - Guest
              - TimeCredit
              - TimeCash
              - TimeUnlimited
    CardListModel:
      type: object
      properties:
        totalCount:
          type: integer
          description: Total items count
          x-yaver-mock:
            type: integer
            options:
              min: 0
              max: 30
        items:
          type: array
          items:
            $ref: '#/components/schemas/CardListItemModel'
    CardListItemModel:
      type: object
      properties:
        cardNo:
          type: string
          example: '1234567890123456'
          x-yaver-mock:
            type: cc
        tenantIdentifier:
          type: string
          example: funnycenter1
          x-yaver-mock:
            type: word
            options:
              length: 8
        cardTypes:
          type: array
          items:
            $ref: '#/components/schemas/CardTransactionTypes'
    CardTypeModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
          x-yaver-mock:
            type: guid
        balance:
          type: number
          format: double
          example: 100
          x-yaver-mock:
            type: floating
            options:
              min: 100
              max: 300
        type:
          $ref: '#/components/schemas/CardTransactionTypes'
        expirationDate:
          type: number
          example: 100
          x-yaver-mock:
            type: integer
            options:
              min: 100
              max: 300
        startDate:
          type: string
          example: '2020-01-01T00:00:00.000Z'
          x-yaver-mock:
            type: isodate
        status:
          $ref: '#/components/schemas/CardStatus'
    CardModel:
      type: object
      properties:
        cardNo:
          type: string
          example: '1234567890123456'
          x-yaver-mock:
            type: cc
        tenantIdentifier:
          type: string
          example: funnycenter1
          x-yaver-mock:
            type: word
            options:
              length: 8
        cardTypes:
          type: array
          items:
            $ref: '#/components/schemas/CardTypeModel'
    NotificationListModel:
      type: object
      properties:
        totalCount:
          type: integer
          description: Total items count
          x-yaver-mock:
            type: integer
            options:
              min: 0
              max: 30
        items:
          type: array
          items:
            $ref: '#/components/schemas/NotificationListItemModel'
    NotificationListItemModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
          x-yaver-mock:
            type: guid
        title:
          type: string
          example: 'Notification Title'
          x-yaver-mock:
            type: sentence
            options:
              words: 3
        description:
          type: string
          example: 'Notification Description'
          x-yaver-mock:
            type: sentence
            options:
              words: 5
        isRead:
          type: boolean
          example: false
          x-yaver-mock:
            type: bool
        createdAt:
          type: string
          example: '2020-01-01T00:00:00.000Z'
          x-yaver-mock:
            type: isodate
    CardTransactionTypes:
      type: string
      enum:
        - Cash
        - Bonus
        - Game
        - Softplay
        - Ticket
        - Credit
        - Guest
        - TimeCredit
        - TimeCash
        - TimeUnlimited
      example: Cash
      x-message-enum: 'Cash,Bonus,Game,Softplay,Ticket,Credit,Guest,TimeCredit,TimeCash,TimeUnlimited'

      x-yaver-mock:
        type: pickone
        options:
          - Cash
          - Bonus
          - Game
          - Softplay
          - Ticket
          - Guest
          - Credit
          - TimeCredit
          - TimeCash
          - TimeUnlimited
    CardStatus:
      type: string
      enum:
        - Active
        - Passive
        - Blocked
      example: Active
      x-yaver-mock:
        type: pickone
        options:
          - Active
          - Passive
          - Blocked
